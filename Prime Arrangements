class Solution:
    def numPrimeArrangements(self, n: int) -> int:
        MOD = 10**9 + 7
        
        def is_prime(num):
            """
            # Alternative:
            for i in range(2, int(n**0.5) + 1):
                if n % i == 0: return False
            return True 
            """
            if num <= 1:
                return False
            if num <= 3:
                return True
            if num % 2 == 0 or num % 3 == 0:
                return False
            i = 5
            while i * i <= num:
                if num % i == 0 or num % (i + 2) == 0:
                    return False
                i += 6 # Skip even numbers and multiples of 3
            return True

        def factorial(num):
            f = 1
            for i in range(2, num + 1):
                f = f * i 
            return f
        
        primes_count = sum(is_prime(x) for x in range(1, n + 1))
        non_primes_count = n - primes_count
        return factorial(primes_count) * factorial(non_primes_count) % MOD
